{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","id","src","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAaeA,MAVf,YAA4B,IAAZC,EAAW,EAAXA,QACd,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,kBAAaF,EAAQG,IAAMC,IAAG,+BAA0BJ,EAAQG,GAAlC,4BACtC,6BAAKH,EAAQK,OACb,4BAAIL,EAAQM,YCIHC,G,MARE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,qBAAKP,UAAU,YAAf,SACEO,EAASC,KAAI,SAACT,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCOlCO,G,MAXG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,uBACAX,UAAU,SACVY,KAAK,OACLF,YAAaA,EACbG,SAAUF,MC8BCG,G,wDAjCb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,4FAad,8BAAAI,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEsBA,EAASC,OAF/B,OAEQC,EAFR,OAGEC,KAAKV,SAAS,CAAET,SAAUkB,IAH5B,gD,0EAMA,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAAIA,EAAQK,KAAKyB,cAAcC,SAASb,EAAYc,wBAEpG,OACE,sBAAK/B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6eeef9b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nfunction Card({ monster }) {\r\n  return (\r\n    <div className='card-container'>\r\n      <img alt={`monster-${monster.id}`} src={`https://robohash.org/${monster.id}?size=180x180&set=set1`}></img>\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport Card from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ monsters }) => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{monsters.map((monster) => <Card key={monster.id} monster={monster}/>)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n  return (\r\n    <input \r\n    className='search'\r\n    type=\"text\" \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await response.json();\n    this.setState({ monsters: users });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Roboto Rolodex</h1>\n        <SearchBox placeholder=\"Search monsters\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}